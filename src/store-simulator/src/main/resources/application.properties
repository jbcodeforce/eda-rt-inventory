# App Configuration file
quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n
quarkus.log.console.enable=true
quarkus.log.console.level=DEBUG
# For all backend 
# The target messaging could be one of Kafka, RabbitMQ or IBMMQ or comma separated list
app.target.messaging=Kafka,IBMMQ
app.name=StoreSimulator
app.version=0.0.15
quarkus.http.port=8080
quarkus.http.cors=true
%dev.quarkus.http.cors.origins="http://localhost:4545"
#quarkus.ssl.native=true
quarkus.swagger-ui.always-include=true
quarkus.openshift.route.expose=true
quarkus.openshift.env.configmaps=store-simulator-cm
# quarkus.openshift.env.secrets=store-simulator-secrets
# quarkus.kubernetes.deployment-target=knative
quarkus.http.test-port=8083
quarkus.http.test-ssl-port=8446

# IBM MQ settings
mq.host=localhost
mq.port=1414
mq.channel=DEV.APP.SVRCONN
mq.qmgr=QM1
mq.app_user=app
mq.app_password=passw0rd
mq.queue_name=DEV.QUEUE.1

# Rabbit MQ settings
amqp.host=localhost
amqp.port=5672
amqp.username=rabbit-user
amqp.password=rabbit-pass
amqp.virtualHost=/
amqp.queue=items

# kafka.security.protocol="SASL_SSL"
#kafka.security.protocol=
#kafka.sasl.jaas.config=

# kafka.sasl.mechanism=PLAIN
# kafka.sasl.jaas.config="org.apache.kafka.common.security.plain.PlainLoginModule required username=\"token\" password="+${KAFKA_APIKEY} + ") \";"
# kafka.sasl.mechanism=SCRAM-SHA-512
# kafka.sasl.jaas.config="org.apache.kafka.common.security.scram.ScramLoginModule required \"username=\"<scram_username>\" password=\"<scram_password>\";"


# Mutual auth properties
# TLS Properties
%prod.kafka.sasl.mechanism=SCRAM-SHA-512
%prod.kafka.ssl.protocol=TLSv1.2
%prod.kafka.ssl.truststore.location=/deployments/certs/server/ca.p12
%prod.kafka.ssl.truststore.type=PKCS12
%prod.kafka.ssl.truststore.password=${KAFKA_CERT_PWD}
%prod.kafka.ssl.keystore.location=/deployments/certs/user/user.p12
%prod.kafka.ssl.keystore.password=${USER_CERT_PWD}
%prod.kafka.ssl.keystore.type=PKCS12

quarkus.kafka.devservices.topic-partitions.items=1
mp.messaging.outgoing.items.connector=smallrye-kafka
mp.messaging.outgoing.items.topic=${KAFKA_TOPIC_NAME}
%prod.mp.messaging.outgoing.items.acks=-1
%prod.mp.messaging.outgoing.items.enable.idempotence=true
mp.messaging.outgoing.items.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.items.value.serializer=io.apicurio.registry.serde.avro.AvroKafkaSerializer
# without schema registry uses:  io.quarkus.kafka.client.serialization.JsonbSerializer
%prod.mp.messaging.outgoing.items.max-inflight-messages=1
%prod.mp.messaging.outgoing.items.delivery.time.out=60000
%prod.mp.messaging.outgoing.items.client.id=StoreSimulator


# Schema registry
# automatically register the schema with the registry, if not present
%dev.mp.messaging.connector.smallrye-kafka.apicurio.registry.url=http://localhost:8083/apis/registry/v2
%dev.mp.messaging.connector.smallrye-kafka.apicurio.registry.kafka.security.protocol=PLAINTEXT
%prod.mp.messaging.connector.smallrye-kafka.apicurio.registry.url=${ES_APICURIO_URL}
# for SASL_SSL authentication and encryption
#%prod.mp.messaging.connector.smallrye-kafka.apicurio.registry.kafka.security.protocol=SASL_SSL
#%prod.mp.messaging.connector.smallrye-kafka.apicurio.registry.sasl.jaas.config=${JAAS_CFG}
#%prod.mp.messaging.connector.smallrye-kafka.apicurio.registry.kafka.sasl.mechanism=PLAIN
# For TLS encryption
#%prod.mp.messaging.connector.smallrye-kafka.apicurio.registry.kafka.security.protocol=SSL
#%prod.mp.messaging.connector.smallrye-kafka.apicurio.registry.kafka.ssl.protocol=TLSv1.2

%prod.mp.messaging.connector.smallrye-kafka.apicurio.registry.basic.auth.credentials.source=USER_INFO
%prod.mp.messaging.connector.smallrye-kafka.apicurio.registry.schema.registry.basic.auth.user.info=scram-user-schema:cDGz4C2WX7Uf
%prod.mp.messaging.connector.smallrye-kafka.apicurio.registry.kafka.ssl.endpoint.identification.algorithm=
%prod.mp.messaging.connector.smallrye-kafka.apicurio.registry.kafka.ssl.truststore.location=/deployments/certs/server/ca.p12
%prod.mp.messaging.connector.smallrye-kafka.apicurio.registry.kafka.ssl.truststore.type=PKCS12
%prod.mp.messaging.connector.smallrye-kafka.apicurio.registry.kafka.ssl.truststore.password=${KAFKA_CERT_PWD}
%prod.mp.messaging.connector.smallrye-kafka.apicurio.registry.kafka.ssl.keystore.location=/deployments/certs/user/user.p12
%prod.mp.messaging.connector.smallrye-kafka.apicurio.registry.kafka.ssl.keystore.type=PKCS12
%prod.mp.messaging.connector.smallrye-kafka.apicurio.registry.kafka.ssl.keystore.password=${USER_CERT_PWD}


mp.messaging.outgoing.items.apicurio.registry.auto-register=true
mp.messaging.outgoing.items.apicurio.registry.artifact-id=io.apicurio.registry.utils.serde.strategy.SimpleTopicIdStrategy
mp.messaging.outgoing.items.apicurio.registry.global-id=io.apicurio.registry.utils.serde.strategy.GetOrCreateIdStrategy
mp.messaging.outgoing.items.apicurio.registry.avro-datum-provider=io.apicurio.registry.serde.avro.ReflectAvroDatumProvider
mp.messaging.outgoing.items.apicurio.registry.avro.encoding=JSON


## OpenShift - Kafka - for deployment config generation
# ----------------------------------------------------------
quarkus.openshift.mounts.kafka-cert.path=/deployments/certs/server
quarkus.openshift.secret-volumes.kafka-cert.secret-name=kafka-cluster-ca-cert
quarkus.openshift.secret-volumes.kafka-cert.optional=true

quarkus.openshift.env.mapping.KAFKA_CERT_PWD.from-secret=kafka-cluster-ca-cert
quarkus.openshift.env.mapping.KAFKA_CERT_PWD.with-key=ca.password

quarkus.openshift.mounts.user-cert.path=/deployments/certs/user
quarkus.openshift.secret-volumes.user-cert.secret-name=tls-user
quarkus.openshift.secret-volumes.user-cert.optional=true

quarkus.openshift.env.mapping.USER_CERT_PWD.from-secret=tls-user
quarkus.openshift.env.mapping.USER_CERT_PWD.with-key=user.password

## OpenShift - MQ
quarkus.openshift.env.vars.MQ_CCDT_CONFIG_PATH=/deployments/certs/mq-ccdt/mq-ccdt.json
quarkus.openshift.mounts.mq-ccdt-config.path=/deployments/certs/mq-ccdt
quarkus.openshift.config-map-volumes.mq-ccdt-config.config-map-name=mq-ccdt-config
quarkus.openshift.config-map-volumes.mq-ccdt-config.optional=true

quarkus.openshift.env.vars.MQ_CIPHER_SUITE=TLS12ORHIGHER

# NEEDS TO BE SET VIA -Djava.net.ssl.trustStore* PROPERTIES ONLY FOR JMS
# quarkus.openshift.env.vars.MQ_TLS_CERT_PATH=/deployments/certs/mq-tls/mq-tls.jks
quarkus.openshift.mounts.mq-tls-truststore.path=/deployments/certs/mq-tls
quarkus.openshift.secret-volumes.mq-tls-truststore.secret-name=store-simulator-mq-truststore
quarkus.openshift.secret-volumes.mq-tls-truststore.optional=true


#mp.messaging.outgoing.amqp-items.connector=smallrye-amqp
#mp.messaging.outgoing.amqp-items.topic=items
#mp.messaging.outgoing.amqp-items.key.serializer=org.apache.kafka.common.serialization.StringSerializer
#mp.messaging.outgoing.amqp-items.value.serializer=io.quarkus.kafka.client.serialization.JsonbSerializer
#mp.messaging.outgoing.amqp-items.waitForWriteCompletion=true
quarkus.reactive-messaging.metrics.enabled=true
